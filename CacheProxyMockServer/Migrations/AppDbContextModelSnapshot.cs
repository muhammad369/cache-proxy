// <auto-generated />
using System;
using CacheProxyMockServer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CacheProxyMockServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("CacheProxyMockServer.Models.HistoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FromCache")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MatchedRuleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestHeaders")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseHeaders")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseReason")
                        .HasColumnType("TEXT");

                    b.Property<int>("ResponseStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MatchedRuleId");

                    b.HasIndex("Time");

                    b.ToTable("HistoryItems");
                });

            modelBuilder.Entity("CacheProxyMockServer.Models.Rule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Method")
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestBody")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseHeaders")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseReason")
                        .HasColumnType("TEXT");

                    b.Property<int>("ResponseStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Method", "Url", "RequestBody", "IsActive");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("CacheProxyMockServer.Models.ServerRename", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Rename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Name", "IsActive");

                    b.ToTable("ServerRenames");
                });

            modelBuilder.Entity("CacheProxyMockServer.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("CacheProxyMockServer.Models.HistoryItem", b =>
                {
                    b.HasOne("CacheProxyMockServer.Models.Rule", "MatchedRule")
                        .WithMany("HistoryItems")
                        .HasForeignKey("MatchedRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchedRule");
                });

            modelBuilder.Entity("CacheProxyMockServer.Models.Rule", b =>
                {
                    b.Navigation("HistoryItems");
                });
#pragma warning restore 612, 618
        }
    }
}
